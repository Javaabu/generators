<?php

namespace App\Policies;

use App\Helpers\Activitylog\Activity;
use App\User;
use App\{{singularClass}};
use Illuminate\Auth\Access\HandlesAuthorization;

class {{singularClass}}Policy
{
    use HandlesAuthorization;

    /**
     * Determine whether the user can view any {{singularLower}}
     *
     * @param  User  $user
     * @return mixed
     */
    public function viewAny(User $user)
    {
        return $user->can('view_{{pluralSnake}}');
    }

    /**
     * Determine whether the user can view the {{singularLower}}.
     *
     * @param  User  $user
     * @param  {{singularClass}}  ${{singularSnake}}
     * @return mixed
     */
    public function view(User $user, {{singularClass}} ${{singularSnake}})
    {
        return $this->update($user, ${{singularSnake}});
    }

    /**
     * Determine whether the user can create {{pluralLower}}.
     *
     * @param  User  $user
     * @return mixed
     */
    public function create(User $user)
    {
        return $user->can('edit_{{pluralSnake}}');
    }

    /**
     * Determine whether the user can update the {{singularLower}}.
     *
     * @param  User  $user
     * @param  {{singularClass}}  ${{singularSnake}}
     * @return mixed
     */
    public function update(User $user, {{singularClass}} ${{singularSnake}})
    {
        return $user->can('edit_{{pluralSnake}}');
    }

    /**
     * Determine whether the user can delete the {{singularLower}}.
     *
     * @param  User  $user
     * @param  {{singularClass}}  ${{singularSnake}}
     * @return mixed
     */
    public function delete(User $user, {{singularClass}} ${{singularSnake}})
    {
        return $user->can('delete_{{pluralSnake}}');
    }

    /**
     * Determine whether the user can force delete the {{singularLower}}.
     *
     * @param User $user
     * @param {{singularClass}}  ${{singularSnake}}
     * @return bool
     */
    public function forceDelete(User $user, {{singularClass}}  ${{singularSnake}})
    {
        return $user->can('force_delete_{{pluralSnake}}');
    }

    /**
     * Determine whether the user can restore the {{singularLower}}.
     *
     * @param User $user
     * @param {{singularClass}}  ${{singularSnake}}
     * @return bool
     */
    public function restore(User $user, {{singularClass}}  ${{singularSnake}})
    {
        return $this->trash($user);
    }

    /**
     * Determine whether the user can see the trash.
     *
     * @param User $user
     * @return bool
     */
    public function trash(User $user)
    {
        return $user->can('delete_{{pluralSnake}}') || $user->can('force_delete_{{pluralSnake}}');
    }

    /**
     * Determine whether the user can view logs of the {{singularLower}}.
     *
     * @param User $user
     * @param {{singularClass}}  ${{singularSnake}}
     * @return bool
     */
    public function viewLogs(User $user, {{singularClass}}  ${{singularSnake}})
    {
        return $user->can('viewAny', Activity::class) &&
               $this->update($user, ${{singularSnake}});
    }
}

<?php

namespace App\Http\Controllers\{{studlyAuthName}};

use App\Http\Controllers\Controller;
use App\Http\Requests\{{pluralStudly}}Request;
use App\Models\{{singularStudly}};
use Illuminate\Http\Request;

class {{singularStudly}}Controller extends Controller
{
    /**
     * Display the {{singularLower}} account edit page
     */
    public function edit(Request $request)
    {
        /** @var {{singularStudly}} ${{singularSnake}} */
        ${{singularSnake}} = $request->user();

        return view('{{kebabAuthName}}.account.edit', compact('{{singularSnake}}'));
    }

    /**
     * Update the {{singularLower}} account
     */
    public function update({{pluralStudly}}Request $request)
    {
        /** @var {{singularStudly}} ${{singularSnake}} */
        ${{singularSnake}} = $request->user();

        if ($action = $request->input('action')) {
            switch ($action) {
                case 'update_password':
                    // update password
                    if ($password = $request->input('password')) {
                        ${{singularSnake}}->password = $password;
                        ${{singularSnake}}->save();

                        flash_push('alerts', [
                            'text' => __('Password changed successfully'),
                            'type' => 'success',
                            'title' => __('Success!'),
                        ]);
                    }
                    break;
            }
        } else {
            // update the email
            if (($new_email = $request->email) && $new_email != ${{singularSnake}}->email) {
                $new_email = ${{singularSnake}}->requestEmailUpdate($new_email);
                if ($new_email) {
                    flash_push('alerts', [
                        'text' => __('We\'ve sent a verification link to :new_email. Please verify the new email address to update it', compact('new_email')),
                        'type' => 'success',
                        'title' => __('New Email Verification Sent'),
                    ]);
                }
            }

            // fill update
            // booleans update
            // foreign keys update
            ${{singularSnake}}->save();

            // update avatar
            ${{singularSnake}}->updateSingleMedia('avatar', $request);

            $this->flashSuccessMessage();
        }

        return $this->redirect($request, route('{{kebabAuthName}}.account'));
    }
}

<?php

namespace App\Http\Controllers\Admin;

use Illuminate\Http\Request;
use Javaabu\Auth\Notifications\NewPasswordNotification;
use Javaabu\Helpers\Traits\HasOrderbys;
use App\Http\Controllers\Controller;
use App\Http\Requests\{{pluralStudly}}Request;
use App\Models\{{singularStudly}};
use App\Exports\{{pluralStudly}}Export;

class {{pluralStudly}}Controller extends Controller
{
    use HasOrderbys;

    /**
     * Create a new  controller instance.
     */
    public function __construct()
    {
        $this->authorizeResource({{singularStudly}}::class);
    }

    /**
     * Initialize orderbys
     */
    protected static function initOrderbys()
    {
        static::$orderbys = [
        ];
    }

    /**
     * Display a listing of the resource.
     */
    public function index(Request $request, bool $trashed = false)
    {
        $title = $trashed ? __('All Deleted {{pluralTitle}}') : __('All {{pluralTitle}}');
        $orderby = $this->getOrderBy($request, 'created_at');
        $order = $this->getOrder($request, 'created_at', $orderby);
        $per_page = $this->getPerPage($request);

        ${{pluralSnake}} = {{singularStudly}}::orderBy($orderby, $order);

        $search = null;
        if ($search = $request->input('search')) {
            ${{pluralSnake}}->search($search);
            $title = __('{{pluralTitle}} matching \':search\'', ['search' => $search]);
        }

        if ($status = $request->input('status')) {
            ${{pluralSnake}}->whereStatus($status);
        }

        if ($request->filled('locked_out')) {
            if ($request->input('locked_out')) {
                ${{pluralSnake}}->lockedOut();
            } else {
                ${{pluralSnake}}->notLockedOut();
            }
        }

        if ($date_field = $request->input('date_field')) {
            ${{pluralSnake}}->dateBetween($date_field, $request->input('date_from'), $request->input('date_to'));
        }

        if ($trashed) {
            ${{pluralSnake}}->onlyTrashed();
        }
        // eager loads
        if ($request->download) {
            return (new {{pluralStudly}}Export(${{pluralSnake}}))->download('{{pluralKebab}}.xlsx');
        }

        ${{pluralSnake}} = ${{pluralSnake}}->paginate($per_page)
           {{appendSpaces}}->appends($request->except('page'));

        return view('admin.{{pluralKebab}}.index', compact('{{pluralSnake}}', 'title', 'per_page', 'search', 'trashed'));
    }

    /**
     * Show the form for creating a new resource.
     */
    public function create(Request $request)
    {
        return view('admin.{{pluralKebab}}.create');
    }

    /**
     * Store a newly created resource in storage.
     */
    public function store({{pluralStudly}}Request $request)
    {
        ${{singularSnake}} = new {{singularStudly}}({{requestFillable}});
        ${{singularSnake}}->email = $request->input('email');
        ${{singularSnake}}->setEmailVerificationStatus($request->input('email_verified', false));
        // booleans
        // foreign keys

        $password = $request->input('password');

        if ($password) {
            ${{singularSnake}}->password = $password;
            ${{singularSnake}}->require_password_update = $request->input('require_password_update', false);
        }

        if ($request->user()->can('approve', {{singularStudly}}::class)) {
            ${{singularSnake}}->approve();
        } else {
            ${{singularSnake}}->markAsPending();
        }

        ${{singularSnake}}->save();

        ${{singularSnake}}->updateSingleMedia('avatar', $request);

        if ($password && $request->send_password) {
            ${{singularSnake}}->notify(new NewPasswordNotification($password));
        }

        $this->flashSuccessMessage();

        return redirect()->action([{{pluralStudly}}Controller::class, 'edit'], ${{singularSnake}});
    }

    /**
     * Display the specified resource.
     */
    public function show({{singularStudly}} ${{singularSnake}})
    {
        return view('admin.{{pluralKebab}}.show', compact('{{singularSnake}}'));
    }

    /**
     * Show the form for editing the specified resource.
     */
    public function edit({{singularStudly}} ${{singularSnake}})
    {
        return view('admin.{{pluralKebab}}.edit', compact('{{singularSnake}}'));
    }

    /**
     * Update the specified resource in storage.
     */
    public function update({{pluralStudly}}Request $request, {{singularStudly}} ${{singularSnake}})
    {
        if ($action = $request->input('action')) {
            switch ($action) {
                case 'resend_verification':
                    $this->authorize('resendVerification', ${{singularSnake}});
                    ${{singularSnake}}->resendEmailVerification();

                    flash_push('alerts', [
                        'text' => __('Email verification resent successfully.'),
                        'type' => 'success',
                        'title' => __('Success!'),
                    ]);
                    break;

                case 'approve':
                    $this->authorize('approve', {{singularStudly}}::class);
                    ${{singularSnake}}->approve();
                    break;

                case 'ban':
                    $this->authorize('approve', {{singularStudly}}::class);
                    ${{singularSnake}}->ban();
                    break;

                case 'mark_pending':
                    $this->authorize('approve', {{singularStudly}}::class);
                    ${{singularSnake}}->markAsPending();
                    break;

                case 'update_password':
                    // update password
                    if ($password = $request->input('password')) {
                        ${{singularSnake}}->password = $password;

                        if ($request->input('require_password_update')) {
                            ${{singularSnake}}->require_password_update = true;
                        } else {
                            ${{singularSnake}}->require_password_update = false;
                        }

                        ${{singularSnake}}->resetLoginAttempts();

                        if ($password && $request->send_password) {
                            ${{singularSnake}}->notify(new NewPasswordNotification($password));
                        }

                        flash_push('alerts', [
                            'text' => __('Password changed successfully'),
                            'type' => 'success',
                            'title' => __('Success!'),
                        ]);
                    }
                    break;
            }
        } else {
            // fill update
            // booleans update
            // foreign keys update

            if ($email = $request->input('email')) {
                ${{singularSnake}}->email = $email;
            }

            if ($request->filled('email_verified')) {
                ${{singularSnake}}->setEmailVerificationStatus($request->email_verified);
            }

            ${{singularSnake}}->updateSingleMedia('avatar', $request);
        }

        ${{singularSnake}}->save();

        $this->flashSuccessMessage();

        return redirect()->action([{{pluralStudly}}Controller::class, 'edit'], ${{singularSnake}});
    }

    /**
     * Remove the specified resource from storage.
     */
    public function destroy({{singularStudly}} ${{singularSnake}}, Request $request)
    {
        if (! ${{singularSnake}}->delete()) {
            if ($request->expectsJson()) {
                return response()->json(false, 500);
            }

            abort(500);
        }

        if ($request->expectsJson()) {
            return response()->json(true);
        }

        return redirect()->action([{{pluralStudly}}Controller::class, 'index']);
    }

    /**
     * Display a listing of the deleted resources.
     */
    public function trash(Request $request)
    {
        $this->authorize('viewTrash', {{singularStudly}}::class);

        return $this->index($request, true);
    }

    /**
     * Force delete the resource
     */
    public function forceDelete({{singularStudly}} ${{singularSnake}}, Request $request)
    {
        // make sure it is trashed
        if (! ${{singularSnake}}->trashed()) {
            abort(404);
        }

        $this->authorize('forceDelete', ${{singularSnake}});

        // send error
        if (! ${{singularSnake}}->forceDelete()) {
            if ($request->expectsJson()) {
                return response()->json(false, 500);
            }

            abort(500);
        }

        if ($request->expectsJson()) {
            return response()->json(true);
        }

        return redirect()->action([{{pluralStudly}}Controller::class, 'trash']);
    }

    /**
     * Restore deleted resource
     */
    public function restore({{singularStudly}} ${{singularSnake}}, Request $request)
    {
        // make sure it is trashed
        if (! ${{singularSnake}}->trashed()) {
            abort(404);
        }

        $this->authorize('restore', ${{singularSnake}});

        // send error
        if (! ${{singularSnake}}->restore()) {
            if ($request->expectsJson()) {
                return response()->json(false, 500);
            }

            abort(500);
        }

        if ($request->expectsJson()) {
            return response()->json(true);
        }

        return redirect()->action([{{pluralStudly}}Controller::class, 'trash']);
    }

    /**
     * Perform bulk action on the resource
     */
    public function bulk(Request $request)
    {
        $this->authorize('viewAny', {{singularStudly}}::class);

        $this->validate($request, [
            'action' => 'required|in:delete,approve,ban',
            '{{pluralSnake}}' => 'required|array',
            '{{pluralSnake}}.*' => 'exists:{{pluralSnake}},{{keyName}}',
        ]);

        $action = $request->input('action');
        $ids = $request->input('{{pluralSnake}}', []);

        switch ($action) {
            case 'delete':
                // make sure allowed to delete
                $this->authorize('delete_{{pluralSnake}}');

                {{singularStudly}}::whereIn('id', $ids)
                    ->get()
                    ->each(function ({{singularStudly}} ${{singularSnake}}) {
                        ${{singularSnake}}->delete();
                    });
                break;

            case 'ban':
            case 'approve':
                // make sure allowed to approve
                $this->authorize('approve', {{singularStudly}}::class);

                {{singularStudly}}::whereIn('id', $ids)
                    ->get()
                    ->each(function ({{singularStudly}} ${{singularSnake}}) use ($action) {
                        ${{singularSnake}}->{$action}();
                        ${{singularSnake}}->save();
                    });
                break;
        }

        $this->flashSuccessMessage();

        return $this->redirect($request, action([{{pluralStudly}}Controller::class, 'index']));
    }
}

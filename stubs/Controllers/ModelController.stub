<?php

namespace App\Http\Controllers\Admin;

use Illuminate\Http\Request;
use Javaabu\Helpers\Traits\HasOrderbys;
use App\Http\Controllers\Controller;
use App\Http\Requests\{{pluralStudly}}Request;
use App\Models\{{singularStudly}};
use App\Exports\{{pluralStudly}}Export;

class {{pluralStudly}}Controller extends Controller
{
    use HasOrderbys;

    /**
     * Create a new  controller instance.
     */
    public function __construct()
    {
        $this->authorizeResource({{singularStudly}}::class);
    }

    /**
     * Initialize orderbys
     */
    protected static function initOrderbys()
    {
        static::$orderbys = [
        ];
    }

    /**
     * Display a listing of the resource.
     */
    public function index(Request $request)
    {
        $title = __('All {{pluralTitle}}');
        $orderby = $this->getOrderBy($request, 'created_at');
        $order = $this->getOrder($request, 'created_at', $orderby);
        $per_page = $this->getPerPage($request);

        ${{pluralSnake}} = {{singularStudly}}::orderBy($orderby, $order);

        $search = null;
        if ($search = $request->input('search')) {
            ${{pluralSnake}}->search($search);
            $title = __('{{pluralTitle}} matching \':search\'', ['search' => $search]);
        }

        if ($date_field = $request->input('date_field')) {
            ${{pluralSnake}}->dateBetween($date_field, $request->input('date_from'), $request->input('date_to'));
        }
        // eager loads
        if ($request->download) {
            return (new {{pluralStudly}}Export(${{pluralSnake}}))->download('{{pluralKebab}}.xlsx');
        }

        ${{pluralSnake}} = ${{pluralSnake}}->paginate($per_page)
           {{appendSpaces}}->appends($request->except('page'));

        return view('admin.{{pluralKebab}}.index', compact('{{pluralSnake}}', 'title', 'per_page', 'search'));
    }

    /**
     * Show the form for creating a new resource.
     */
    public function create(Request $request)
    {
        return view('admin.{{pluralKebab}}.create');
    }

    /**
     * Store a newly created resource in storage.
     */
    public function store({{pluralStudly}}Request $request)
    {
        ${{singularSnake}} = new {{singularStudly}}({{requestFillable}});
        // booleans
        // foreign keys

        ${{singularSnake}}->save();

        $this->flashSuccessMessage();

        return redirect()->action([{{pluralStudly}}Controller::class, 'edit'], ${{singularSnake}});
    }

    /**
     * Display the specified resource.
     */
    public function show({{singularStudly}} ${{singularSnake}})
    {
        return view('admin.{{pluralKebab}}.show', compact('{{singularSnake}}'));
    }

    /**
     * Show the form for editing the specified resource.
     */
    public function edit({{singularStudly}} ${{singularSnake}})
    {
        return view('admin.{{pluralKebab}}.edit', compact('{{singularSnake}}'));
    }

    /**
     * Update the specified resource in storage.
     */
    public function update({{pluralStudly}}Request $request, {{singularStudly}} ${{singularSnake}})
    {
        // fill update
        // booleans
        // foreign keys

        ${{singularSnake}}->save();

        $this->flashSuccessMessage();

        return redirect()->action([{{pluralStudly}}Controller::class, 'edit'], ${{singularSnake}});
    }

    /**
     * Remove the specified resource from storage.
     */
    public function destroy({{singularStudly}} ${{singularSnake}}, Request $request)
    {
        if (! ${{singularSnake}}->delete()) {
            if ($request->expectsJson()) {
                return response()->json(false, 500);
            }

            abort(500);
        }

        if ($request->expectsJson()) {
            return response()->json(true);
        }

        return redirect()->action([{{pluralStudly}}Controller::class, 'index']);
    }

    /**
     * Perform bulk action on the resource
     */
    public function bulk(Request $request)
    {
        $this->authorize('viewAny', {{singularStudly}}::class);

        $this->validate($request, [
            'action' => 'required|in:delete',
            '{{pluralSnake}}' => 'required|array',
            '{{pluralSnake}}.*' => 'exists:{{pluralSnake}},{{keyName}}',
        ]);

        $action = $request->input('action');
        $ids = $request->input('{{pluralSnake}}', []);

        switch ($action) {
            case 'delete':
                // make sure allowed to delete
                $this->authorize('delete_{{pluralSnake}}');

                {{singularStudly}}::whereIn('id', $ids)
                    ->get()
                    ->each(function ({{singularStudly}} ${{singularSnake}}) {
                        ${{singularSnake}}->delete();
                    });
                break;
        }

        $this->flashSuccessMessage();

        return $this->redirect($request, action([{{pluralStudly}}Controller::class, 'index']));
    }
}

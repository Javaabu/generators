<?php

namespace Tests\Feature\Controllers\Admin;

use Illuminate\Foundation\Testing\RefreshDatabase;
// use statements

class {{pluralStudly}}ControllerTest extends AdminTestCase
{
    use RefreshDatabase;

    /** @test */
    public function it_can_list_{{pluralSnake}}()
    {
        $this->withoutExceptionHandling();

        $this->actingAsAdmin('view_{{pluralSnake}}');

        ${{singularSnake}} = $this->getFactory({{singularStudly}}::class)->create();

        $this->adminGet('/{{pluralKebab}}')
            ->assertStatus(200)
            ->assertSee(${{singularSnake}}->{{nameField}});
    }

    /** @test */
    public function it_does_not_allow_an_unauthorized_user_to_list_{{pluralSnake}}()
    {
        $this->actingAsAdmin();

        ${{singularSnake}} = $this->getFactory({{singularStudly}}::class)->create();

        $this->adminGet('/{{pluralKebab}}')
            ->assertStatus(403)
            ->assertDontSee(${{singularSnake}}->{{nameField}});
    }

    /** @test */
    public function it_can_show_the_create_new_{{singularSnake}}_page()
    {
        $this->withoutExceptionHandling();

        $this->actingAsAdmin('edit_{{pluralSnake}}');

        $this->adminGet('/{{pluralKebab}}/create')
            ->assertStatus(200)
            ->assertSee('New {{singularTitle}}');
    }

    /** @test */
    public function it_does_not_allow_an_unauthorized_user_to_see_the_create_new_{{singularSnake}}_page()
    {
        $this->actingAsAdmin();

        $this->adminGet('/{{pluralKebab}}/create')
            ->assertStatus(403)
            ->assertDontSee('New {{singularTitle}}');
    }

    /** @test */
    public function it_can_create_a_new_{{singularSnake}}()
    {
        $this->withoutExceptionHandling();

        $this->actingAsAdmin('edit_{{pluralSnake}}');

        ${{singularSnake}} = $this->getFactory({{singularStudly}}::class)->make();

        $this->adminPost('/{{pluralKebab}}', [
            // factory inputs
        ])
            ->assertRedirect()
            ->assertSessionMissing('errors');

        $this->assertDatabaseHas('{{tableName}}', [
            // factory db values
        ]);
    }

    /** @test */
    public function it_does_not_allow_an_unauthorized_user_to_add_a_{{singularSnake}}()
    {
        $this->actingAsAdmin();

        ${{singularSnake}} = $this->getFactory({{singularStudly}}::class)->make();

        $this->adminPost('/{{pluralKebab}}', [
            // factory inputs
        ])
            ->assertSessionMissing('errors')
            ->assertStatus(403);

        $this->assertDatabaseMissing('{{tableName}}', [
            // factory db values
        ]);
    }

    /** @test */
    public function it_can_show_the_edit_{{singularSnake}}_page()
    {
        $this->withoutExceptionHandling();

        $this->actingAsAdmin('edit_{{pluralSnake}}');

        ${{singularSnake}} = $this->getFactory({{singularStudly}}::class)->create();

        $this->adminGet("/{{pluralKebab}}/{${{singularSnake}}->{{keyName}}}/edit")
            ->assertStatus(200)
            ->assertSee(${{singularSnake}}->{{nameField}});
    }

    /** @test */
    public function it_does_not_allow_an_unauthorized_user_to_see_the_edit_{{singularSnake}}_page()
    {
        $this->actingAsAdmin();

        ${{singularSnake}} = $this->getFactory({{singularStudly}}::class)->create();

        $this->adminGet("/{{pluralKebab}}/{${{singularSnake}}->{{keyName}}}/edit")
            ->assertStatus(403)
            ->assertDontSee(${{singularSnake}}->{{nameField}});
    }

    /** @test */
    public function it_can_update_a_{{singularSnake}}()
    {
        $this->withoutExceptionHandling();

        $this->actingAsAdmin('edit_{{pluralSnake}}');

        // old foreign key models
        ${{singularSnake}} = {{singularStudly}}::factory()->create([
            // correct factory values
        ]);

        // new foreign key models
        $this->adminPatch("/{{pluralKebab}}/{${{singularSnake}}->{{keyName}}}", [
            // different correct inputs
        ])
            ->assertRedirect()
            ->assertSessionMissing('errors');

        $this->assertDatabaseHas('{{tableName}}', [
            '{{keyName}}' => ${{singularSnake}}->{{keyName}},
            // different correct db values
        ]);
    }

    /** @test */
    public function it_does_not_allow_an_unauthorized_user_to_update_a_{{singularSnake}}()
    {
        $this->actingAsAdmin();

        // old foreign key models
        ${{singularSnake}} = {{singularStudly}}::factory()->create([
            // correct factory values
        ]);

        // new foreign key models
        $this->adminPatch("/{{pluralKebab}}/{${{singularSnake}}->{{keyName}}}", [
            // different correct inputs
        ])
            ->assertSessionMissing('errors')
            ->assertStatus(403);

        $this->assertDatabaseHas('{{tableName}}', [
            '{{keyName}}' => ${{singularSnake}}->{{keyName}},
            // correct db values
        ]);
    }

    /** @test */
    public function it_can_show_a_{{singularSnake}}()
    {
        $this->withoutExceptionHandling();

        $this->actingAsAdmin('view_{{pluralSnake}}');

        ${{singularSnake}} = $this->getFactory({{singularStudly}}::class)->create();

        $this->adminGet("/{{pluralKebab}}/{${{singularSnake}}->{{keyName}}}")
            ->assertStatus(200)
            ->assertSee(${{singularSnake}}->{{nameField}});
    }

    /** @test */
    public function it_does_not_allow_an_unauthorized_user_to_view_a_{{singularSnake}}()
    {
        $this->actingAsAdmin();

        ${{singularSnake}} = $this->getFactory({{singularStudly}}::class)->create();

        $this->adminGet("/{{pluralKebab}}/{${{singularSnake}}->{{keyName}}}")
            ->assertStatus(403)
            ->assertDontSee(${{singularSnake}}->{{nameField}});
    }

    /** @test */
    public function it_can_delete_a_{{singularSnake}}()
    {
        $this->withoutExceptionHandling();

        $this->actingAsAdmin('delete_{{pluralSnake}}');

        ${{singularSnake}} = $this->getFactory({{singularStudly}}::class)->create();

        $this->assertDatabaseHas('{{tableName}}', [
            '{{keyName}}' => ${{singularSnake}}->{{keyName}},
        ]);

        $this->adminDelete("/{{pluralKebab}}/{${{singularSnake}}->{{keyName}}}")
             ->assertRedirect();

        $this->assertDatabaseMissing('{{tableName}}', [
            '{{keyName}}' => ${{singularSnake}}->{{keyName}},
        ]);
    }

    /** @test */
    public function it_does_not_allow_an_unauthorized_user_to_delete_a_{{singularSnake}}()
    {
        $this->actingAsAdmin();

        ${{singularSnake}} = $this->getFactory({{singularStudly}}::class)->create();

        $this->assertDatabaseHas('{{tableName}}', [
            '{{keyName}}' => ${{singularSnake}}->{{keyName}},
        ]);

        $this->adminDelete("/{{pluralKebab}}/{${{singularSnake}}->{{keyName}}}")
             ->assertStatus(403);

        $this->assertDatabaseHas('{{tableName}}', [
            '{{keyName}}' => ${{singularSnake}}->{{keyName}},
        ]);
    }

    /** @test */
    public function it_can_bulk_delete_{{pluralSnake}}()
    {
        $this->withoutExceptionHandling();

        $this->actingAsAdmin(['view_{{pluralSnake}}', 'delete_{{pluralSnake}}']);

        ${{pluralSnake}} = $this->getFactory({{singularStudly}}::class)->count(3)->create();

        ${{pluralSnake}} = ${{pluralSnake}}->map(function (${{singularSnake}}) {
            return collect(${{singularSnake}}->toArray())
                ->only('{{keyName}}')
                ->all();
        });

        ${{pluralSnake}}->each(function (${{singularSnake}}) {
            $this->assertDatabaseHas('{{tableName}}', ${{singularSnake}});
        });

        ${{pluralSnake}}_to_delete = ${{pluralSnake}}->slice(1);

        $this->adminPatch('/{{pluralKebab}}', [
            '{{pluralSnake}}' => ${{pluralSnake}}_to_delete->pluck('{{keyName}}')->all(),
            'action' => 'delete',
        ])
            ->assertRedirect()
            ->assertSessionMissing('errors');

        ${{pluralSnake}}_to_delete->each(function (${{singularSnake}}) {
            $this->assertDatabaseMissing('{{tableName}}', ${{singularSnake}});
        });
    }

    /** @test */
    public function it_does_not_allow_unauthorized_users_to_bulk_delete_{{pluralSnake}}()
    {
        $this->actingAsAdmin('view_{{pluralSnake}}');

        ${{pluralSnake}} = $this->getFactory({{singularStudly}}::class)->count(3)->create();

        ${{pluralSnake}} = ${{pluralSnake}}->map(function (${{singularSnake}}) {
            return collect(${{singularSnake}}->toArray())
                ->only('{{keyName}}')
                ->all();
        });

        ${{pluralSnake}}->each(function (${{singularSnake}}) {
            $this->assertDatabaseHas('{{tableName}}', ${{singularSnake}});
        });

        ${{pluralSnake}}_to_delete = ${{pluralSnake}}->slice(1);

        $this->adminPatch('/{{pluralKebab}}', [
            '{{pluralSnake}}' => ${{pluralSnake}}_to_delete->pluck('{{keyName}}')->all(),
            'action' => 'delete',
        ])
            ->assertStatus(403)
            ->assertSessionMissing('errors');

        ${{pluralSnake}}_to_delete->each(function (${{singularSnake}}) {
            $this->assertDatabaseHas('{{tableName}}', ${{singularSnake}});
        });
    }

    /** @test */
    public function it_can_validate_{{singularSnake}}_inputs()
    {
        $this->actingAsAdmin('edit_{{pluralSnake}}');

        $this->adminPost('/{{pluralKebab}}', [
            // wrong inputs
        ])
            ->assertRedirect()
            ->assertSessionHasErrors([
                // errors
            ]);

        $this->assertDatabaseMissing('{{tableName}}', [
            // wrong db values
        ]);
    }
}

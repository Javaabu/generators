<?php

namespace Tests\Feature\Controllers\Api;

use App\Models\{{singularStudly}};
use Illuminate\Foundation\Testing\RefreshDatabase;

class {{pluralStudly}}ControllerTest extends ApiTestCase
{
    use RefreshDatabase;

    /** @test */
    public function it_can_list_api_{{pluralSnake}}_for_public_users(): void
    {
        $this->withoutExceptionHandling();

        $access_cookie = $this->getOAuthCookie(null);

        ${{pluralSnake}} = $this->getFactory({{singularStudly}}::class)->count(10)->create();

        $this->jsonApi('get', '/api/v1/{{pluralKebab}}', access_cookie: $access_cookie)
            ->assertSuccessful()
            ->assertJsonFragment([
                '{{nameField}}' => ${{pluralSnake}}->first()->{{nameField}},
            ]);

    }

    /** @test */
    public function it_can_show_api_{{pluralSnake}}_for_public_users(): void
    {
        $this->withoutExceptionHandling();

        $access_cookie = $this->getOAuthCookie(null);

        ${{singularSnake}} = $this->getFactory({{singularStudly}}::class)->create();

        $this->jsonApi('get', "/api/v1/{{pluralKebab}}/{${{singularSnake}}->{{keyName}}}", access_cookie: $access_cookie)
            ->assertSuccessful()
            ->assertJsonFragment([
                '{{nameField}}' => ${{singularSnake}}->{{nameField}},
            ]);
    }

    /** @test */
    public function it_can_list_api_{{pluralSnake}}_for_admin_users(): void
    {
        $this->withoutExceptionHandling();

        $this->actingAsApiAdmin('view_{{pluralSnake}}');

        ${{pluralSnake}} = $this->getFactory({{singularStudly}}::class)->count(10)->create();

        $this->getJson('/api/v1/{{pluralKebab}}')
            ->assertSuccessful()
            ->assertJsonFragment([
                '{{nameField}}' => ${{pluralSnake}}->first()->{{nameField}},
            ]);

    }

    /** @test */
    public function it_can_show_api_{{pluralSnake}}_for_admin_users(): void
    {
        $this->withoutExceptionHandling();

        $this->actingAsApiAdmin('view_{{pluralSnake}}');

        ${{singularSnake}} = $this->getFactory({{singularStudly}}::class)->create();

        $this->getJson("/api/v1/{{pluralKebab}}/{${{singularSnake}}->{{keyName}}}")
            ->assertSuccessful()
            ->assertJsonFragment([
                'name' => ${{singularSnake}}->name,
            ]);
    }
}

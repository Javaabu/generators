<?php

namespace Tests\Feature\Controllers\Admin;

use Illuminate\Foundation\Testing\RefreshDatabase;
use App\Models\Category;

class CategoriesControllerTest extends AdminTestCase
{
    use RefreshDatabase;

    /** @test */
    public function it_can_list_categories()
    {
        $this->withoutExceptionHandling();

        $this->actingAsAdmin('view_categories');

        $category = $this->getFactory(Category::class)->create();

        $this->adminGet('/categories')
            ->assertStatus(200)
            ->assertSee(e($category->name));
    }

    /** @test */
    public function it_does_not_allow_an_unauthorized_user_to_list_categories()
    {
        $this->actingAsAdmin();

        $category = $this->getFactory(Category::class)->create();

        $this->adminGet('/categories')
            ->assertStatus(403)
            ->assertDontSee(e($category->name));
    }

    /** @test */
    public function it_can_create_a_new_category()
    {
        $this->actingAsAdmin('edit_categories');

        $category = $this->getFactory(Category::class)->make();

        $this->adminPost('/categories', [
            'name' => $category->name,
            'slug' => $category->slug,
        ])
            ->assertRedirect()
            ->assertSessionMissing('errors');

        $this->assertDatabaseHas('categories', [
            'name' => $category->name,
            'slug' => $category->slug,
        ]);
    }

    /** @test */
    public function it_does_not_allow_an_unauthorized_user_to_add_a_category()
    {
        $this->actingAsAdmin();

        $category = $this->getFactory(Category::class)->make();

        $this->adminPost('/categories', [
            'name' => $category->name,
            'slug' => $category->slug,
        ])
            ->assertSessionMissing('errors')
            ->assertStatus(403);

        $this->assertDatabaseMissing('categories', [
            'name' => $category->name,
            'slug' => $category->slug,
        ]);
    }

    /** @test */
    public function it_can_update_a_category()
    {
        $this->actingAsAdmin('edit_categories');

        $category = Category::factory()->create([
            'name' => 'foo',
            'slug' => 'foo',
        ]);

        $this->adminPatch("/categories/{$category->id}", [
            'name' => 'bar',
            'slug' => 'bar',
        ])
            ->assertRedirect()
            ->assertSessionMissing('errors');

        $this->assertDatabaseHas('categories', [
            'id' => $category->id,
            'name' => 'bar',
            'slug' => 'bar',
        ]);
    }

    /** @test */
    public function it_does_not_allow_an_unauthorized_user_to_update_a_category()
    {
        $this->actingAsAdmin();

        $category = Category::factory()->create([
            'name' => 'foo',
            'slug' => 'foo',
        ]);

        $this->adminPatch("/categories/{$category->id}", [
            'name' => 'bar',
            'slug' => 'bar',
        ])
            ->assertSessionMissing('errors')
            ->assertStatus(403);

        $this->assertDatabaseHas('categories', [
            'id' => $category->id,
            'name' => 'foo',
            'slug' => 'foo',
        ]);
    }

    /** @test */
    public function it_can_show_a_category()
    {
        $this->withoutExceptionHandling();

        $this->actingAsAdmin('view_categories');

        $category = $this->getFactory(Category::class)->create();

        $this->adminGet("/categories/{$category->id}")
            ->assertStatus(200)
            ->assertSee(e($category->name));
    }

    /** @test */
    public function it_does_not_allow_an_unauthorized_user_to_view_a_category()
    {
        $this->actingAsAdmin();

        $category = $this->getFactory(Category::class)->create();

        $this->adminGet("/categories/{$category->id}")
            ->assertStatus(403)
            ->assertDontSee(e($category->name));
    }

    /** @test */
    public function it_can_delete_a_category()
    {
        $this->actingAsAdmin('delete_categories');

        $category = $this->getFactory(Category::class)->create();

        $this->assertDatabaseHas('categories', [
            'id' => $category->id,
        ]);

        $this->adminDelete("/categories/{$category->id}")
             ->assertRedirect();

        $this->assertDatabaseMissing('categories', [
            'id' => $category->id,
        ]);
    }

    /** @test */
    public function it_does_not_allow_an_unauthorized_user_to_delete_a_category()
    {
        $this->actingAsAdmin();

        $category = $this->getFactory(Category::class)->create();

        $this->assertDatabaseHas('categories', [
            'id' => $category->id,
        ]);

        $this->adminDelete("/categories/{$category->id}")
             ->assertStatus(403);

        $this->assertDatabaseHas('categories', [
            'id' => $category->id,
        ]);
    }

    /** @test */
    public function it_can_bulk_delete_categories()
    {
        $this->actingAsAdmin(['view_categories', 'delete_categories']);

        $categories = $this->getFactory(Category::class)->count(3)->create();

        $categories = $categories->map(function ($category) {
            return collect($category->toArray())
                ->only('id')
                ->all();
        });

        $categories->each(function ($category) {
            $this->assertDatabaseHas('categories', $category);
        });

        $categories_to_delete = $categories->slice(1);

        $this->adminPatch('/categories', [
            'categories' => $categories_to_delete->pluck('id')->all(),
            'action' => 'delete',
        ])
            ->assertRedirect()
            ->assertSessionMissing('errors');

        $categories_to_delete->each(function ($category) {
            $this->assertDatabaseMissing('categories', $category);
        });
    }

    /** @test */
    public function it_does_not_allow_unauthorized_users_to_bulk_delete_categories()
    {
        $this->actingAsAdmin('view_categories');

        $categories = $this->getFactory(Category::class)->count(3)->create();

        $categories = $categories->map(function ($category) {
            return collect($category->toArray())
                ->only('id')
                ->all();
        });

        $categories->each(function ($category) {
            $this->assertDatabaseHas('categories', $category);
        });

        $categories_to_delete = $categories->slice(1);

        $this->adminPatch('/categories', [
            'categories' => $categories_to_delete->pluck('id')->all(),
            'action' => 'delete',
        ])
            ->assertStatus(403)
            ->assertSessionMissing('errors');

        $categories_to_delete->each(function ($category) {
            $this->assertDatabaseHas('categories', $category);
        });
    }

    /** @test */
    public function it_can_validate_category_inputs()
    {
        $this->actingAsAdmin('edit_categories');

        $this->adminPost('/categories', [
            'name' => [],
            'slug' => [],
        ])
            ->assertRedirect()
            ->assertSessionHasErrors([
                'name',
                'slug',
            ]);

        $this->assertDatabaseMissing('categories', [
            'name' => [],
            'slug' => [],
        ]);
    }
}

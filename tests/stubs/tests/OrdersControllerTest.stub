<?php

namespace Tests\Feature\Controllers\Admin;

use Illuminate\Foundation\Testing\RefreshDatabase;
use App\Exports\OrdersExport;
use Maatwebsite\Excel\Facades\Excel;
use App\Models\Order;
use App\Models\Category;
use App\Models\Product;
use Javaabu\Generators\Tests\TestSupport\Enums\OrderStatuses;

class OrdersControllerTest extends AdminTestCase
{
    use RefreshDatabase;

    /** @test */
    public function it_can_list_orders()
    {
        $this->withoutExceptionHandling();

        $this->actingAsAdmin('view_orders');

        $order = $this->getFactory(Order::class)->create();

        $this->adminGet('/orders')
            ->assertStatus(200)
            ->assertSee($order->order_no);
    }

    /** @test */
    public function it_can_filter_orders()
    {
        $this->withoutExceptionHandling();

        $this->actingAsAdmin('view_orders');

        $order = $this->getFactory(Order::class)->create();

        $this->adminGet(add_query_arg([,
            'search' => $order->name,
            'date_field' => 'created_at',
            'date_from' => now()->subDay()->toDateTimeString(),
            'date_to' => now()->addDay()->toDateTimeString(),
        ], '/orders')
            ->assertStatus(200)
            ->assertSee($order->name);
    }

    /** @test */
    public function it_can_export_orders()
    {
        $this->withoutExceptionHandling();

        $this->actingAsAdmin('view_orders');

        $order = $this->getFactory(Order::class)->create();

        Excel::fake();

        $this->setFakeSetting('app_name', 'Test App');

        $this->adminGet(add_query_arg(['download' => 1], '/orders'))
            ->assertSuccessful();

        Excel::assertDownloaded('test-app-orders.csv', function (OrdersExport $export) {
            return $export->modelClass() == Order::class;
        });
    }

    /** @test */
    public function it_does_not_allow_an_unauthorized_user_to_list_orders()
    {
        $this->actingAsAdmin();

        $order = $this->getFactory(Order::class)->create();

        $this->adminGet('/orders')
            ->assertStatus(403)
            ->assertDontSee($order->order_no);
    }

    /** @test */
    public function it_can_show_the_create_new_order_page()
    {
        $this->withoutExceptionHandling();

        $this->actingAsAdmin('edit_orders');

        $this->adminGet('/orders/create')
            ->assertStatus(200)
            ->assertSee('New Order');
    }

    /** @test */
    public function it_does_not_allow_an_unauthorized_user_to_see_the_create_new_order_page()
    {
        $this->actingAsAdmin();

        $this->adminGet('/orders/create')
            ->assertStatus(403)
            ->assertDontSee('New Order');
    }

    /** @test */
    public function it_can_create_a_new_order()
    {
        $this->withoutExceptionHandling();

        $this->actingAsAdmin('edit_orders');

        $order = $this->getFactory(Order::class)->make();

        $this->adminPost('/orders', [
            'order_no' => $order->order_no,
            'category' => $order->category_id,
            'product_slug' => $order->product_slug,
            'status' => $order->status->value,
        ])
            ->assertRedirect()
            ->assertSessionMissing('errors');

        $this->assertDatabaseHas('orders', [
            'order_no' => $order->order_no,
            'category_id' => $order->category_id,
            'product_slug' => $order->product_slug,
            'status' => $order->status->value,
        ]);
    }

    /** @test */
    public function it_does_not_allow_an_unauthorized_user_to_add_a_order()
    {
        $this->actingAsAdmin();

        $order = $this->getFactory(Order::class)->make();

        $this->adminPost('/orders', [
            'order_no' => $order->order_no,
            'category' => $order->category_id,
            'product_slug' => $order->product_slug,
            'status' => $order->status->value,
        ])
            ->assertSessionMissing('errors')
            ->assertStatus(403);

        $this->assertDatabaseMissing('orders', [
            'order_no' => $order->order_no,
            'category_id' => $order->category_id,
            'product_slug' => $order->product_slug,
            'status' => $order->status->value,
        ]);
    }

    /** @test */
    public function it_can_show_the_edit_order_page()
    {
        $this->withoutExceptionHandling();

        $this->actingAsAdmin('edit_orders');

        $order = $this->getFactory(Order::class)->create();

        $this->adminGet("/orders/{$order->id}/edit")
            ->assertStatus(200)
            ->assertSee($order->order_no);
    }

    /** @test */
    public function it_does_not_allow_an_unauthorized_user_to_see_the_edit_order_page()
    {
        $this->actingAsAdmin();

        $order = $this->getFactory(Order::class)->create();

        $this->adminGet("/orders/{$order->id}/edit")
            ->assertStatus(403)
            ->assertDontSee($order->order_no);
    }

    /** @test */
    public function it_can_update_a_order()
    {
        $this->withoutExceptionHandling();

        $this->actingAsAdmin('edit_orders');

        $old_category = $this->getFactory(Category::class)->create();
        $old_product_slug = $this->getFactory(Product::class)->create();

        $order = Order::factory()->create([
            'order_no' => 'foo',
            'category_id' => $old_category->id,
            'product_slug' => $old_product_slug->slug,
            'status' => OrderStatuses::Pending->value,
        ]);

        $new_category = $this->getFactory(Category::class)->create();
        $new_product_slug = $this->getFactory(Product::class)->create();

        $this->adminPatch("/orders/{$order->id}", [
            'order_no' => 'bar',
            'category' => $new_category->id,
            'product_slug' => $new_product_slug->slug,
            'status' => OrderStatuses::Paid->value,
        ])
            ->assertRedirect()
            ->assertSessionMissing('errors');

        $this->assertDatabaseHas('orders', [
            'id' => $order->id,
            'order_no' => 'bar',
            'category_id' => $new_category->id,
            'product_slug' => $new_product_slug->slug,
            'status' => OrderStatuses::Paid->value,
        ]);
    }

    /** @test */
    public function it_does_not_allow_an_unauthorized_user_to_update_a_order()
    {
        $this->actingAsAdmin();

        $old_category = $this->getFactory(Category::class)->create();
        $old_product_slug = $this->getFactory(Product::class)->create();

        $order = Order::factory()->create([
            'order_no' => 'foo',
            'category_id' => $old_category->id,
            'product_slug' => $old_product_slug->slug,
            'status' => OrderStatuses::Pending->value,
        ]);

        $new_category = $this->getFactory(Category::class)->create();
        $new_product_slug = $this->getFactory(Product::class)->create();

        $this->adminPatch("/orders/{$order->id}", [
            'order_no' => 'bar',
            'category' => $new_category->id,
            'product_slug' => $new_product_slug->slug,
            'status' => OrderStatuses::Paid->value,
        ])
            ->assertSessionMissing('errors')
            ->assertStatus(403);

        $this->assertDatabaseHas('orders', [
            'id' => $order->id,
            'order_no' => 'foo',
            'category_id' => $old_category->id,
            'product_slug' => $old_product_slug->slug,
            'status' => OrderStatuses::Pending->value,
        ]);
    }

    /** @test */
    public function it_can_show_a_order()
    {
        $this->withoutExceptionHandling();

        $this->actingAsAdmin('view_orders');

        $order = $this->getFactory(Order::class)->create();

        $this->adminGet("/orders/{$order->id}")
            ->assertStatus(200)
            ->assertSee($order->order_no);
    }

    /** @test */
    public function it_does_not_allow_an_unauthorized_user_to_view_a_order()
    {
        $this->actingAsAdmin();

        $order = $this->getFactory(Order::class)->create();

        $this->adminGet("/orders/{$order->id}")
            ->assertStatus(403)
            ->assertDontSee($order->order_no);
    }

    /** @test */
    public function it_can_delete_a_order()
    {
        $this->withoutExceptionHandling();

        $this->actingAsAdmin('delete_orders');

        $order = $this->getFactory(Order::class)->create();

        $this->assertDatabaseHas('orders', [
            'id' => $order->id,
        ]);

        $this->adminDelete("/orders/{$order->id}")
             ->assertRedirect();

        $this->assertDatabaseMissing('orders', [
            'id' => $order->id,
        ]);
    }

    /** @test */
    public function it_does_not_allow_an_unauthorized_user_to_delete_a_order()
    {
        $this->actingAsAdmin();

        $order = $this->getFactory(Order::class)->create();

        $this->assertDatabaseHas('orders', [
            'id' => $order->id,
        ]);

        $this->adminDelete("/orders/{$order->id}")
             ->assertStatus(403);

        $this->assertDatabaseHas('orders', [
            'id' => $order->id,
        ]);
    }

    /** @test */
    public function it_can_bulk_delete_orders()
    {
        $this->withoutExceptionHandling();

        $this->actingAsAdmin(['view_orders', 'delete_orders']);

        $orders = $this->getFactory(Order::class)->count(3)->create();

        $orders = $orders->map(function ($order) {
            return collect($order->toArray())
                ->only('id')
                ->all();
        });

        $orders->each(function ($order) {
            $this->assertDatabaseHas('orders', $order);
        });

        $orders_to_delete = $orders->slice(1);

        $this->adminPatch('/orders', [
            'orders' => $orders_to_delete->pluck('id')->all(),
            'action' => 'delete',
        ])
            ->assertRedirect()
            ->assertSessionMissing('errors');

        $orders_to_delete->each(function ($order) {
            $this->assertDatabaseMissing('orders', $order);
        });
    }

    /** @test */
    public function it_does_not_allow_unauthorized_users_to_bulk_delete_orders()
    {
        $this->actingAsAdmin('view_orders');

        $orders = $this->getFactory(Order::class)->count(3)->create();

        $orders = $orders->map(function ($order) {
            return collect($order->toArray())
                ->only('id')
                ->all();
        });

        $orders->each(function ($order) {
            $this->assertDatabaseHas('orders', $order);
        });

        $orders_to_delete = $orders->slice(1);

        $this->adminPatch('/orders', [
            'orders' => $orders_to_delete->pluck('id')->all(),
            'action' => 'delete',
        ])
            ->assertStatus(403)
            ->assertSessionMissing('errors');

        $orders_to_delete->each(function ($order) {
            $this->assertDatabaseHas('orders', $order);
        });
    }

    /** @test */
    public function it_can_validate_order_inputs()
    {
        $this->actingAsAdmin('edit_orders');

        $this->adminPost('/orders', [
            'order_no' => [],
            'category' => -1,
            'product_slug' => -1,
            'status' => [],
        ])
            ->assertRedirect()
            ->assertSessionHasErrors([
                'order_no',
                'category',
                'product_slug',
                'status',
            ]);

        $this->assertDatabaseMissing('orders', [
            'order_no' => [],
            'category_id' => -1,
            'product_slug' => -1,
            'status' => [],
        ]);
    }
}

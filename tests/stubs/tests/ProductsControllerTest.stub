<?php

namespace Tests\Feature\Controllers\Admin;

use Illuminate\Foundation\Testing\RefreshDatabase;
use App\Models\Product;
use App\Models\Category;

class ProductsControllerTest extends AdminTestCase
{
    use RefreshDatabase;

    /** @test */
    public function it_can_list_products()
    {
        $this->withoutExceptionHandling();

        $this->actingAsAdmin('view_products');

        $product = $this->getFactory(Product::class)->create();

        $this->adminGet('/products')
            ->assertStatus(200)
            ->assertSee(e($product->name));
    }

    /** @test */
    public function it_does_not_allow_an_unauthorized_user_to_list_products()
    {
        $this->actingAsAdmin();

        $product = $this->getFactory(Product::class)->create();

        $this->adminGet('/products')
            ->assertStatus(403)
            ->assertDontSee(e($product->name));
    }

    /** @test */
    public function it_can_create_a_new_product()
    {
        $this->actingAsAdmin('edit_products');

        $product = $this->getFactory(Product::class)->make();

        $this->adminPost('/products', [
            'name' => $product->name,
            'address' => $product->address,
            'slug' => $product->slug,
            'description' => $product->description,
            'price' => $product->price,
            'stock' => $product->stock,
            'on_sale' => $product->on_sale,
            'features' => $product->features,
            'published_at' => $product->published_at,
            'expire_at' => $product->expire_at,
            'released_on' => $product->released_on,
            'sale_time' => $product->sale_time,
            'status' => $product->status,
            'category' => $product->category_id,
            'manufactured_year' => $product->manufactured_year,
        ])
            ->assertRedirect()
            ->assertSessionMissing('errors');

        $this->assertDatabaseHas('products', [
            'name' => $product->name,
            'address' => $product->address,
            'slug' => $product->slug,
            'description' => $product->description,
            'price' => $product->price,
            'stock' => $product->stock,
            'on_sale' => $product->on_sale,
            'features' => json_encode($product->features),
            'published_at' => $product->published_at,
            'expire_at' => $product->expire_at,
            'released_on' => $product->released_on,
            'sale_time' => $product->sale_time,
            'status' => $product->status,
            'category_id' => $product->category_id,
            'manufactured_year' => $product->manufactured_year,
        ]);
    }

    /** @test */
    public function it_does_not_allow_an_unauthorized_user_to_add_a_product()
    {
        $this->actingAsAdmin();

        $product = $this->getFactory(Product::class)->make();

        $this->adminPost('/products', [
            'name' => $product->name,
            'address' => $product->address,
            'slug' => $product->slug,
            'description' => $product->description,
            'price' => $product->price,
            'stock' => $product->stock,
            'on_sale' => $product->on_sale,
            'features' => $product->features,
            'published_at' => $product->published_at,
            'expire_at' => $product->expire_at,
            'released_on' => $product->released_on,
            'sale_time' => $product->sale_time,
            'status' => $product->status,
            'category' => $product->category_id,
            'manufactured_year' => $product->manufactured_year,
        ])
            ->assertSessionMissing('errors')
            ->assertStatus(403);

        $this->assertDatabaseMissing('products', [
            'name' => $product->name,
            'address' => $product->address,
            'slug' => $product->slug,
            'description' => $product->description,
            'price' => $product->price,
            'stock' => $product->stock,
            'on_sale' => $product->on_sale,
            'features' => json_encode($product->features),
            'published_at' => $product->published_at,
            'expire_at' => $product->expire_at,
            'released_on' => $product->released_on,
            'sale_time' => $product->sale_time,
            'status' => $product->status,
            'category_id' => $product->category_id,
            'manufactured_year' => $product->manufactured_year,
        ]);
    }

    /** @test */
    public function it_can_update_a_product()
    {
        $this->actingAsAdmin('edit_products');

        $old_category = $this->getFactory(Category::class)->create();

        $product = Product::factory()->create([
            'name' => 'foo',
            'address' => 'foo',
            'slug' => 'foo',
            'description' => 'Lorem ipsum',
            'price' => 10.50,
            'stock' => 1,
            'on_sale' => true,
            'features' => ['apple'],
            'published_at' => '2024-02-12 14:54',
            'expire_at' => '2024-02-12 14:54',
            'released_on' => '2024-02-12',
            'sale_time' => '14:54',
            'status' => 'draft',
            'category_id' => $old_category->id,
            'manufactured_year' => 2024,
        ]);

        $new_category = $this->getFactory(Category::class)->create();

        $this->adminPatch("/products/{$product->id}", [
            'name' => 'bar',
            'address' => 'bar',
            'slug' => 'bar',
            'description' => 'Itsu bitsum',
            'price' => 5.24,
            'stock' => 2,
            'on_sale' => false,
            'features' => ['orange'],
            'published_at' => '2023-01-11 13:30',
            'expire_at' => '2023-01-11 13:30',
            'released_on' => '2023-01-11',
            'sale_time' => '13:30',
            'status' => 'published',
            'category' => $new_category->id,
            'manufactured_year' => 2023,
        ])
            ->assertRedirect()
            ->assertSessionMissing('errors');

        $this->assertDatabaseHas('products', [
            'id' => $product->id,
            'name' => 'bar',
            'address' => 'bar',
            'slug' => 'bar',
            'description' => 'Itsu bitsum',
            'price' => 5.24,
            'stock' => 2,
            'on_sale' => false,
            'features' => json_encode(['orange']),
            'published_at' => '2023-01-11 13:30',
            'expire_at' => '2023-01-11 13:30',
            'released_on' => '2023-01-11',
            'sale_time' => '13:30',
            'status' => 'published',
            'category_id' => $new_category->id,
            'manufactured_year' => 2023,
        ]);
    }

    /** @test */
    public function it_does_not_allow_an_unauthorized_user_to_update_a_product()
    {
        $this->actingAsAdmin();

        $old_category = $this->getFactory(Category::class)->create();

        $product = Product::factory()->create([
            'name' => 'foo',
            'address' => 'foo',
            'slug' => 'foo',
            'description' => 'Lorem ipsum',
            'price' => 10.50,
            'stock' => 1,
            'on_sale' => true,
            'features' => ['apple'],
            'published_at' => '2024-02-12 14:54',
            'expire_at' => '2024-02-12 14:54',
            'released_on' => '2024-02-12',
            'sale_time' => '14:54',
            'status' => 'draft',
            'category_id' => $old_category->id,
            'manufactured_year' => 2024,
        ]);

        $new_category = $this->getFactory(Category::class)->create();

        $this->adminPatch("/products/{$product->id}", [
            'name' => 'bar',
            'address' => 'bar',
            'slug' => 'bar',
            'description' => 'Itsu bitsum',
            'price' => 5.24,
            'stock' => 2,
            'on_sale' => false,
            'features' => ['orange'],
            'published_at' => '2023-01-11 13:30',
            'expire_at' => '2023-01-11 13:30',
            'released_on' => '2023-01-11',
            'sale_time' => '13:30',
            'status' => 'published',
            'category' => $new_category->id,
            'manufactured_year' => 2023,
        ])
            ->assertSessionMissing('errors')
            ->assertStatus(403);

        $this->assertDatabaseHas('products', [
            'id' => $product->id,
            'name' => 'foo',
            'address' => 'foo',
            'slug' => 'foo',
            'description' => 'Lorem ipsum',
            'price' => 10.50,
            'stock' => 1,
            'on_sale' => true,
            'features' => json_encode(['apple']),
            'published_at' => '2024-02-12 14:54',
            'expire_at' => '2024-02-12 14:54',
            'released_on' => '2024-02-12',
            'sale_time' => '14:54',
            'status' => 'draft',
            'category_id' => $old_category->id,
            'manufactured_year' => 2024,
        ]);
    }

    /** @test */
    public function it_can_show_a_product()
    {
        $this->withoutExceptionHandling();

        $this->actingAsAdmin('view_products');

        $product = $this->getFactory(Product::class)->create();

        $this->adminGet("/products/{$product->id}")
            ->assertStatus(200)
            ->assertSee(e($product->name));
    }

    /** @test */
    public function it_does_not_allow_an_unauthorized_user_to_view_a_product()
    {
        $this->actingAsAdmin();

        $product = $this->getFactory(Product::class)->create();

        $this->adminGet("/products/{$product->id}")
            ->assertStatus(403)
            ->assertDontSee(e($product->name));
    }

    /** @test */
    public function it_can_soft_delete_a_product()
    {
        $this->actingAsAdmin('delete_products');

        $product = $this->getFactory(Product::class)->create();

        $this->assertDatabaseHas('products', [
            'id' => $product->id,
        ]);

        $this->adminDelete("/products/{$product->id}")
             ->assertRedirect();

        $this->assertSoftDeleted('products', [
            'id' => $product->id,
        ]);
    }

    /** @test */
    public function it_does_not_allow_an_unauthorized_user_to_soft_delete_a_product()
    {
        $this->actingAsAdmin();

        $product = $this->getFactory(Product::class)->create();

        $this->assertDatabaseHas('products', [
            'id' => $product->id,
        ]);

        $this->adminDelete("/products/{$product->id}")
             ->assertStatus(403);

        $this->assertDatabaseHas('products', [
            'id' => $product->id,
        ]);
    }

    /** @test */
    public function it_can_force_delete_a_product()
    {
        $product = $this->getFactory(Product::class)->create();
        $product->delete();

        // sanity check
        $this->assertSoftDeleted('products', [
            'id' => $product->id,
        ]);

        $this->actingAsAdmin('force_delete_products');

        $this->adminDelete("/products/{$product->id}/force-delete")
            ->assertRedirect();

        $this->assertDatabaseMissing('products', [
            'id' => $product->id,
        ]);
    }

    /** @test */
    public function it_does_not_allow_an_unauthorized_user_to_force_delete_a_product()
    {
        $product = $this->getFactory(Product::class)->create();
        $product->delete();

        // sanity check
        $this->assertSoftDeleted('products', [
            'id' => $product->id,
        ]);

        $this->actingAsAdmin();

        $this->adminDelete("/products/{$product->id}/force-delete")
            ->assertStatus(403);

        $this->assertSoftDeleted('products', [
            'id' => $product->id,
        ]);
    }

    /** @test */
    public function it_can_restore_a_soft_deleted_product()
    {
        $product = $this->getFactory(Product::class)->create();
        $product->delete();

        // sanity check
        $this->assertSoftDeleted('products', [
            'id' => $product->id,
        ]);

        $this->actingAsAdmin('delete_products');

        $this->adminPost("/products/{$product->id}/restore")
            ->assertRedirect();

        $this->assertDatabaseHas('products', [
            'id' => $product->id,
            'deleted_at' => null,
        ]);
    }

    /** @test */
    public function it_does_not_allow_an_unauthorized_user_to_restore_a_product()
    {
        $product = $this->getFactory(Product::class)->create();
        $product->delete();

        // sanity check
        $this->assertSoftDeleted('products', [
            'id' => $product->id,
        ]);

        $this->actingAsAdmin();

        $this->adminPost("/products/{$product->id}/restore")
            ->assertStatus(403);

        $this->assertSoftDeleted('products', [
            'id' => $product->id,
        ]);
    }

    /** @test */
    public function it_can_list_soft_deleted_products()
    {
        $this->withoutExceptionHandling();

        $product = $this->getFactory(Product::class)->create();
        $product->delete();

        // sanity check
        $this->assertSoftDeleted('products', [
            'id' => $product->id,
        ]);

        $this->actingAsAdmin('delete_products');

        $this->adminGet("/products/trash")
            ->assertStatus(200)
            ->assertSee(e($product->name));
    }

    /** @test */
    public function it_does_not_allow_an_unauthorized_user_to_list_soft_deleted_products()
    {
        $product = $this->getFactory(Product::class)->create();
        $product->delete();

        // sanity check
        $this->assertSoftDeleted('products', [
            'id' => $product->id,
        ]);

        $this->actingAsAdmin();

        $this->adminGet("/products/trash")
            ->assertStatus(403)
            ->assertDontSee(e($product->name));
    }

    /** @test */
    public function it_can_bulk_soft_delete_products()
    {
        $this->actingAsAdmin(['view_products', 'delete_products']);

        $products = $this->getFactory(Product::class)->count(3)->create();

        $products = $products->map(function ($product) {
            return collect($product->toArray())
                ->only('id')
                ->all();
        });

        $products->each(function ($product) {
            $this->assertDatabaseHas('products', $product);
        });

        $products_to_delete = $products->slice(1);

        $this->adminPatch('/products', [
            'products' => $products_to_delete->pluck('id')->all(),
            'action' => 'delete',
        ])
            ->assertRedirect()
            ->assertSessionMissing('errors');

        $products_to_delete->each(function ($product) {
            $this->assertSoftDeleted('products', $product);
        });
    }

    /** @test */
    public function it_does_not_allow_unauthorized_users_to_bulk_soft_delete_products()
    {
        $this->actingAsAdmin('view_products');

        $products = $this->getFactory(Product::class)->count(3)->create();

        $products = $products->map(function ($product) {
            return collect($product->toArray())
                ->only('id')
                ->all();
        });

        $products->each(function ($product) {
            $this->assertDatabaseHas('products', $product);
        });

        $products_to_delete = $products->slice(1);

        $this->adminPatch('/products', [
            'products' => $products_to_delete->pluck('id')->all(),
            'action' => 'delete',
        ])
            ->assertStatus(403)
            ->assertSessionMissing('errors');

        $products_to_delete->each(function ($product) {
            $this->assertDatabaseHas('products', $product);
        });
    }

    /** @test */
    public function it_can_validate_product_inputs()
    {
        $this->actingAsAdmin('edit_products');

        $this->adminPost('/products', [
            'name' => [],
            'address' => [],
            'slug' => [],
            'description' => [],
            'price' => 'foo',
            'stock' => 'foo',
            'on_sale' => 'foo',
            'features' => 'foo',
            'published_at' => 'foo',
            'expire_at' => 'foo',
            'released_on' => 'foo',
            'sale_time' => 'foo',
            'status' => [],
            'category' => -1,
            'manufactured_year' => -1,
        ])
            ->assertRedirect()
            ->assertSessionHasErrors([
                'name',
                'address',
                'slug',
                'description',
                'price',
                'stock',
                'on_sale',
                'features',
                'published_at',
                'expire_at',
                'released_on',
                'sale_time',
                'status',
                'category',
                'manufactured_year',
            ]);

        $this->assertDatabaseMissing('products', [
            'name' => [],
            'address' => [],
            'slug' => [],
            'description' => [],
            'price' => 'foo',
            'stock' => 'foo',
            'on_sale' => 'foo',
            'features' => json_encode('foo'),
            'published_at' => 'foo',
            'expire_at' => 'foo',
            'released_on' => 'foo',
            'sale_time' => 'foo',
            'status' => [],
            'category_id' => -1,
            'manufactured_year' => -1,
        ]);
    }
}
